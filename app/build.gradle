apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.jakewharton.butterknife'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    signingConfigs {
        release {}
    }

    buildTypes {
        debug {
            debuggable true //是否生成一個debug的apk
            shrinkResources false //移除無用的資源文件
            minifyEnabled false //混淆編譯
            versionNameSuffix "-dev"  //versionName 追加後輟名 -dev
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            shrinkResources false //移除無用的資源文件
            minifyEnabled false //混淆編譯
            zipAlignEnabled true //使用zipalign工具壓縮
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // 讀取簽名配置
    getSigningProperties()

    // 讀取版本配置
    def versionPropsFile = file('version.properties')
    Properties versionProps = new Properties()

    if (!versionPropsFile.exists()) {
        versionProps['VERSION_PATCH'] = "0"
        versionProps['VERSION_NUMBER'] = "0"
        versionProps['VERSION_BUILD'] = "-1"
        // I set it to minus one so the first build is 0 which isn't super important.
        versionProps.store(versionPropsFile.newWriter(), null)
    }

    if (versionPropsFile.canRead()) {
        versionProps.load(new FileInputStream(versionPropsFile))
        def value = 0
        if (project.hasProperty("assemble")
                || project.hasProperty("assembleRelease")
                || project.hasProperty("aR")) {
            value = 1
        }

        def versionMajor = 1
        def versionMinor = 0
        def versionPatch = versionProps['VERSION_PATCH'].toInteger() + value
        def versionBuild = versionProps['VERSION_BUILD'].toInteger() + 1

        versionProps['VERSION_PATCH'] = versionPatch.toString()
        versionProps['VERSION_BUILD'] = versionBuild.toString()

        versionProps.store(versionPropsFile.newWriter(), null)

        defaultConfig {
            applicationId rootProject.ext.android.applicationId
            minSdkVersion rootProject.ext.android.minSdkVersion
            targetSdkVersion rootProject.ext.android.targetSdkVersion
            versionCode versionPatch
            versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
            testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        }
        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    // apk_渠道名-版本号-版本名称-编译时间.apk
                    outputFileName = "${variant.applicationId}_${releaseTime()}-v${variant.versionName}.apk"
                }
            }
        }
    } else {
        throw new FileNotFoundException("Could not read version.properties!")
    }

    task copyApkFiles(type: Copy) {
        from 'build/outputs/apk/release' ,
                'build/outputs/apk/debug'
        into '../apk'
    }

    afterEvaluate {
        if (project.hasProperty("assembleRelease")) {
            assembleRelease.doLast {
                tasks.copyApkFiles.execute()
            }
        } else {
            assembleDebug.doLast {
//                測試用
//                tasks.copyApkFiles.execute()
            }
        }
    }
}

greendao {
    schemaVersion 1
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    // App's dependencies, including test
    implementation rootProject.ext.dependencies["appcompat-v7"]
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["constraint-layout"]
    // Dependencies for local unit tests
    testImplementation rootProject.ext.dependencies["junit"]

    // Android Testing Support Library's runner and rules
    androidTestImplementation rootProject.ext.dependencies["runner"]

    // Dependencies for Android unit tests
    androidTestImplementation rootProject.ext.dependencies["robolectric"]

    // Espresso UI Testing
    androidTestImplementation rootProject.ext.dependencies["espresso-core"]
    androidTestImplementation('com.android.support.test.espresso:espresso-contrib:3.0.1') {
        // http://stackoverflow.com/a/30931887/5210
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude module: 'recyclerview-v7'
    }

    implementation rootProject.ext.dependencies["picasso"]
    implementation rootProject.ext.dependencies["klog"]
    implementation rootProject.ext.dependencies["greendao"]
    implementation rootProject.ext.dependencies["eventbus"]
    implementation rootProject.ext.dependencies["butterknife"]
    annotationProcessor rootProject.ext.dependencies["butterknife-compiler"]
    implementation project(path: ':utils')
}

static def releaseTime() {
//    return new Date().format("yyyyMMddHHmm", TimeZone.getTimeZone("UTC"))
    return new Date().format("yyyyMMdd_HHmmss")
}

// 讀取簽名配置
def getSigningProperties() {
    def propFile = file('../keystore.properties')
    def configName = 'release'
    if (propFile.exists() && propFile.canRead() && android.signingConfigs.hasProperty(configName)) {
        def props = new Properties()
        props.load(new FileInputStream(propFile))
        if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
                props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
            android.signingConfigs[configName].storeFile = file('../' + props['STORE_FILE'])
            android.signingConfigs[configName].storePassword = props['STORE_PASSWORD']
            android.signingConfigs[configName].keyAlias = props['KEY_ALIAS']
            android.signingConfigs[configName].keyPassword = props['KEY_PASSWORD']
        } else {
            println 'signing.properties are found but some entries are missed!'
            android.buildTypes[configName].signingConfig = null
        }
    } else {
        println 'signing.properties are not found!'
        android.buildTypes[configName].signingConfig = null
    }
}
